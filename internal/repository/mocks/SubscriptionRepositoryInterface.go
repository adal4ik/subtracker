// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dao "subtracker/internal/domain/dao"
	dto "subtracker/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// SubscriptionRepositoryInterface is an autogenerated mock type for the SubscriptionRepositoryInterface type
type SubscriptionRepositoryInterface struct {
	mock.Mock
}

// CreateSubscription provides a mock function with given fields: ctx, subDao
func (_m *SubscriptionRepositoryInterface) CreateSubscription(ctx context.Context, subDao dao.SubscriptionRow) error {
	ret := _m.Called(ctx, subDao)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.SubscriptionRow) error); ok {
		r0 = rf(ctx, subDao)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: ctx, id
func (_m *SubscriptionRepositoryInterface) DeleteSubscription(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscription provides a mock function with given fields: ctx, id
func (_m *SubscriptionRepositoryInterface) GetSubscription(ctx context.Context, id string) (dao.SubscriptionRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 dao.SubscriptionRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dao.SubscriptionRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dao.SubscriptionRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dao.SubscriptionRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, subFilter
func (_m *SubscriptionRepositoryInterface) ListSubscriptions(ctx context.Context, subFilter dto.SubscriptionFilter) ([]dao.SubscriptionRow, error) {
	ret := _m.Called(ctx, subFilter)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []dao.SubscriptionRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.SubscriptionFilter) ([]dao.SubscriptionRow, error)); ok {
		return rf(ctx, subFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.SubscriptionFilter) []dao.SubscriptionRow); ok {
		r0 = rf(ctx, subFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.SubscriptionRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.SubscriptionFilter) error); ok {
		r1 = rf(ctx, subFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: ctx, subDao
func (_m *SubscriptionRepositoryInterface) UpdateSubscription(ctx context.Context, subDao dao.SubscriptionRow) error {
	ret := _m.Called(ctx, subDao)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.SubscriptionRow) error); ok {
		r0 = rf(ctx, subDao)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptionRepositoryInterface creates a new instance of SubscriptionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionRepositoryInterface {
	mock := &SubscriptionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
