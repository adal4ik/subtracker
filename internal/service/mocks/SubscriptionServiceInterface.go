// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "subtracker/internal/domain"
	dto "subtracker/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// SubscriptionServiceInterface is an autogenerated mock type for the SubscriptionServiceInterface type
type SubscriptionServiceInterface struct {
	mock.Mock
}

// CalculateCost provides a mock function with given fields: ctx, filter
func (_m *SubscriptionServiceInterface) CalculateCost(ctx context.Context, filter dto.CostFilter) (int, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for CalculateCost")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CostFilter) (int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CostFilter) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CostFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, subDomain
func (_m *SubscriptionServiceInterface) CreateSubscription(ctx context.Context, subDomain domain.Subscription) error {
	ret := _m.Called(ctx, subDomain)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Subscription) error); ok {
		r0 = rf(ctx, subDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: ctx, id
func (_m *SubscriptionServiceInterface) DeleteSubscription(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscription provides a mock function with given fields: ctx, id
func (_m *SubscriptionServiceInterface) GetSubscription(ctx context.Context, id string) (domain.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Subscription)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, filter
func (_m *SubscriptionServiceInterface) ListSubscriptions(ctx context.Context, filter dto.SubscriptionFilter) ([]domain.Subscription, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.SubscriptionFilter) ([]domain.Subscription, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.SubscriptionFilter) []domain.Subscription); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.SubscriptionFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: ctx, subDomain
func (_m *SubscriptionServiceInterface) UpdateSubscription(ctx context.Context, subDomain domain.Subscription) error {
	ret := _m.Called(ctx, subDomain)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Subscription) error); ok {
		r0 = rf(ctx, subDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptionServiceInterface creates a new instance of SubscriptionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionServiceInterface {
	mock := &SubscriptionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
